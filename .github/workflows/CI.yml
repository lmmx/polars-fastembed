# This file is autogenerated by maturin v1.8.2
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check-commit:
    runs-on: ubuntu-latest
    # This job only runs if the commit message meets the condition
    if: >
      (
        github.event_name == 'push' &&
        (
          startsWith(github.event.head_commit.message, 'chore(release)')
          || contains(github.event.head_commit.message, 'cibuildwheel')
        )
      )
      || (github.event_name == 'workflow_dispatch')
    outputs:
      run-all: ${{ steps.parse.outputs.run-all }}
      run-linux-x86_64: ${{ steps.parse.outputs.run-linux-x86_64 }}
      run-linux-aarch64: ${{ steps.parse.outputs.run-linux-aarch64 }}
      run-windows-x64: ${{ steps.parse.outputs.run-windows-x64 }}
      run-macos-x86_64: ${{ steps.parse.outputs.run-macos-x86_64 }}
      run-macos-aarch64: ${{ steps.parse.outputs.run-macos-aarch64 }}
      run-sdist: ${{ steps.parse.outputs.run-sdist }}

    steps:
      - name: Confirm commit message matches
        run: echo "Commit message matched the condition."

      - name: Parse commit message
        id: parse
        run: |
          # Capture the commit message in a shell variable for convenience
          COMMIT_MSG="${{ github.event.head_commit.message }}"

          # Initialize all outputs to "false"
          echo "run-all=false" >> $GITHUB_OUTPUT
          echo "run-linux-x86_64=false" >> $GITHUB_OUTPUT
          echo "run-linux-aarch64=false" >> $GITHUB_OUTPUT
          echo "run-windows-x64=false" >> $GITHUB_OUTPUT
          echo "run-macos-x86_64=false" >> $GITHUB_OUTPUT
          echo "run-macos-aarch64=false" >> $GITHUB_OUTPUT
          echo "run-sdist=false" >> $GITHUB_OUTPUT

          # Check if commit message has the magic word "cibuildwheel"
          if [[ "$COMMIT_MSG" == *"cibuildwheel"* ]]; then

            # 1) If itâ€™s just "cibuildwheel" with no further platform detail in parentheses,
            #    then run-all is true.
            #    We look for something like: build(cibuildwheel)
            #    or if no bracket parsing can find platform details, we treat it as run-all.
            REGEX_ALL="cibuildwheel\)"
            # 2) If we find "cibuildwheel-" with parentheses, parse out the platforms
            #    e.g. build(cibuildwheel-linux_aarch64,windows_x64)

            # Attempt to capture content inside parentheses after "cibuildwheel-"
            # e.g. "linux_aarch64,windows_x64" from "build(cibuildwheel-linux_aarch64,windows_x64)"
            TARGET_LIST=$(echo "$COMMIT_MSG" | grep -oP '(?<=cibuildwheel-)[^)]*' || true)

            if echo "$COMMIT_MSG" | grep -qE "$REGEX_ALL"; then
              # We found something like "build(cibuildwheel)"
              echo "run-all=true" >> $GITHUB_OUTPUT
            elif [ -n "$TARGET_LIST" ]; then
              # We have one or more targets separated by commas
              # E.g. "linux_aarch64,windows_x64,sdist"
              IFS=',' read -ra TARGETS <<< "$TARGET_LIST"
              for T in "${TARGETS[@]}"; do
                case "$T" in
                  linux_x86_64)
                    echo "run-linux-x86_64=true" >> $GITHUB_OUTPUT
                    ;;
                  linux_aarch64)
                    echo "run-linux-aarch64=true" >> $GITHUB_OUTPUT
                    ;;
                  windows_x64)
                    echo "run-windows-x64=true" >> $GITHUB_OUTPUT
                    ;;
                  macos_x86_64)
                    echo "run-macos-x86_64=true" >> $GITHUB_OUTPUT
                    ;;
                  macos_aarch64)
                    echo "run-macos-aarch64=true" >> $GITHUB_OUTPUT
                    ;;
                  sdist)
                    echo "run-sdist=true" >> $GITHUB_OUTPUT
                    ;;
                  *)
                    echo "Unknown cibuildwheel target: $T"
                    ;;
                esac
              done
            else
              # There's 'cibuildwheel' but no bracket detail => run all
              echo "run-all=true" >> $GITHUB_OUTPUT
            fi
          fi


  linux:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    # Only run if run-all == true OR a specific linux_<arch> was requested.
    if: >
      needs.check-commit.outputs.run-all == 'true'
      OR
      (
        matrix.platform.target == 'x86_64'
        AND needs.check-commit.outputs.run-linux-x86_64 == 'true'
      )
      OR
      (
        matrix.platform.target == 'aarch64'
        AND needs.check-commit.outputs.run-linux-aarch64 == 'true'
      )

    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
            before: yum install -y openssl-devel
          # x86 would require dynamic ORT loading
          # https://ort.pyke.io/setup/linking#runtime-loading-with-load-dynamic
          # see: https://github.com/pykeio/ort/issues/245#issuecomment-2253729331
          # So instead of that I've chosen to just not support x86 (32-bit)
          # - runner: ubuntu-22.04
          #   target: x86
          #   before: yum install -y openssl-devel
          - runner: ubuntu-22.04
            target: aarch64
            before: |
              sudo apt-get update -y && \
              sudo apt-get install pkg-config libssl-dev -y && \
              echo "modversion openssl:" && \
              pkg-config --modversion openssl && \
              echo "cflags openssl:" && \
              pkg-config --cflags openssl && \
              echo "libs openssl:" && \
              pkg-config --libs openssl
          # - runner: ubuntu-22.04
          #   target: armv7
          #   before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
          # - runner: ubuntu-22.04
          #   target: s390x
          #   before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
          # - runner: ubuntu-22.04
          #   target: ppc64le
          #   before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: rewrite
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          before-script-linux: |
            ${{ matrix.platform.before }}
          # docker-options: "--env CIBW_BEFORE_ALL_LINUX='${{ env.CIBW_BEFORE_ALL_LINUX }}'"
        # env:
        #   CIBW_BEFORE_ALL_LINUX: "yum install -y openssl-devel"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          # Same ONNX issue as x86 on Linux (see comment above)
          # - runner: windows-latest
          #   target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: rewrite
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    # Only run if run-all == true OR a specific macos_<arch> was requested.
    if: >
      needs.check-commit.outputs.run-all == 'true'
      OR
      (
        matrix.platform.target == 'x86_64'
        AND needs.check-commit.outputs.run-macos-x86_64 == 'true'
      )
      OR
      (
        matrix.platform.target == 'aarch64'
        AND needs.check-commit.outputs.run-macos-aarch64 == 'true'
      )

    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: rewrite
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    needs: [check-commit]
    runs-on: ubuntu-latest
    # Only run if run-all == true OR if "cibuildwheel-sdist" was explicitly requested
    if: >
      needs.check-commit.outputs.run-all == 'true'
      OR
      needs.check-commit.outputs.run-sdist == 'true'

    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          working-directory: rewrite
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
