# This file is autogenerated by maturin v1.8.2
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check-commit:
    runs-on: ubuntu-latest
    # This job only runs if the commit message meets the condition
    if: >
      (github.event_name == 'push' &&
        (
          startsWith(github.event.head_commit.message, 'chore(release)') ||
          contains(github.event.head_commit.message, 'cibuildwheel')
        )
      )
      || (github.event_name == 'workflow_dispatch')
      || (github.event_name == 'pull_request' && github.event.pull_request.user.login == 'lmmx')
    steps:
      - name: Confirm commit message matches
        run: echo "Commit message matched the condition."

  linux:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
            before: yum install -y openssl-devel
            dockeropts: ""
            skip: false
            features: ""
          - runner: ubuntu-22.04
            target: x86
            before: yum install -y openssl-devel
            skip: false
            features: "--features ort-dynamic"
            # x86 now enabled with dynamic ORT loading
          - runner: ubuntu-22.04
            target: aarch64
            before: |
              sudo apt-get update -y && \
              sudo apt-get install pkg-config libssl-dev -y
            dockeropts: "--env OPENSSL_DIR='/usr'"
            skip: false
            features: ""
          - runner: ubuntu-22.04
            target: armv7
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
            skip: false
            features: "--features ort-dynamic,openssl-vendored"
          - runner: ubuntu-22.04
            target: s390x
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
            # via https://github.com/rust-lang/stacker/issues/79
            dockeropts: "--env CFLAGS_s390x_unknown_linux_gnu=-march=z10"
            skip: false
            features: "--features ort-dynamic,openssl-vendored"
          - runner: ubuntu-22.04
            target: ppc64le
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
            skip: false
            features: "--features ort-dynamic,openssl-vendored"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      # via https://github.com/PyO3/maturin-action/discussions/162#discussioncomment-7978369
      - name: Calculate openssl-vendored
        shell: bash
        id: is-openssl-vendored
        run: |
          if [[ "${{ startsWith(matrix.platform.target, 'x86') }}" == "true" ]]; then
            echo "enabled=" >> $GITHUB_OUTPUT
          else
            echo "enabled=--features openssl-vendored" >> $GITHUB_OUTPUT
          fi
      - name: Setup placeholder ONNX libraries for build time
        run: |
          # Create directory for the script
          mkdir -p scripts

          # Write the placeholder creation script
          cat > scripts/create_onnx_placeholders.py << 'EOF'
          #!/usr/bin/env python3
          import os
          from pathlib import Path

          def main():
              repo_root = Path("rewrite")
              dirs = ["onnx_placeholder/armv7", "onnx_placeholder/x86", "onnx_placeholder/s390x",
                      "onnx_placeholder/ppc64le", "onnx_placeholder/x86_win"]

              for d in dirs:
                  os.makedirs(repo_root / d, exist_ok=True)

              placeholders = [
                  ("onnx_placeholder/armv7/libonnxruntime.so", 1024),
                  ("onnx_placeholder/x86/libonnxruntime.so", 1024),
                  ("onnx_placeholder/s390x/libonnxruntime.so", 1024),
                  ("onnx_placeholder/ppc64le/libonnxruntime.so", 1024),
                  ("onnx_placeholder/x86_win/onnxruntime.dll", 1024),
              ]

              for file_path, size in placeholders:
                  with open(repo_root / file_path, "wb") as f:
                      f.write(b"\0" * size)
                  print(f"Created placeholder: {file_path}")

          if __name__ == "__main__":
              main()
          EOF

          # Make the script executable
          chmod +x scripts/create_onnx_placeholders.py

          # Run the script
          python scripts/create_onnx_placeholders.py
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml ${{ matrix.platform.features }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: ${{ matrix.platform.target == 'aarch64' && '2_28' || 'auto' }}
          before-script-linux: |
            ${{ matrix.platform.before }}
          docker-options: |
            ${{ matrix.platform.dockeropts }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: windows-latest
            target: x64
            skip: false
            features: ""
          # Now enabled with dynamic ORT loading
          - runner: windows-latest
            target: x86
            skip: false
            features: "--features ort-dynamic"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Setup placeholder ONNX libraries for build time
        run: |
          # Create directory for the script
          mkdir -p scripts

          # Write the placeholder creation script
          cat > scripts/create_onnx_placeholders.py << 'EOF'
          #!/usr/bin/env python3
          import os
          from pathlib import Path

          def main():
              repo_root = Path("rewrite")
              dirs = ["onnx_placeholder/armv7", "onnx_placeholder/x86", "onnx_placeholder/s390x",
                      "onnx_placeholder/ppc64le", "onnx_placeholder/x86_win"]

              for d in dirs:
                  os.makedirs(repo_root / d, exist_ok=True)

              placeholders = [
                  ("onnx_placeholder/armv7/libonnxruntime.so", 1024),
                  ("onnx_placeholder/x86/libonnxruntime.so", 1024),
                  ("onnx_placeholder/s390x/libonnxruntime.so", 1024),
                  ("onnx_placeholder/ppc64le/libonnxruntime.so", 1024),
                  ("onnx_placeholder/x86_win/onnxruntime.dll", 1024),
              ]

              for file_path, size in placeholders:
                  with open(repo_root / file_path, "wb") as f:
                      f.write(b"\0" * size)
                  print(f"Created placeholder: {file_path}")

          if __name__ == "__main__":
              main()
          EOF

          # Run the script
          python scripts/create_onnx_placeholders.py
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml ${{ matrix.platform.features }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
            skip: false
            features: ""
          - runner: macos-14
            target: aarch64
            skip: false
            features: ""
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml ${{ matrix.platform.features }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    needs: [check-commit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path rewrite/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
