# This file is autogenerated by maturin v1.8.2
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check-commit:
    runs-on: ubuntu-latest
    # This job only runs if the commit message meets the condition
    if: >
      (github.event_name == 'push' &&
        (
          startsWith(github.event.head_commit.message, 'chore(release)') ||
          contains(github.event.head_commit.message, 'cibuildwheel')
        )
      )
      || (github.event_name == 'workflow_dispatch')
    steps:
      - name: Confirm commit message matches
        run: echo "Commit message matched the condition."

  linux:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
            before: yum install -y openssl-devel
            dockeropts: ""
          # x86 would require dynamic ORT loading
          # https://ort.pyke.io/setup/linking#runtime-loading-with-load-dynamic
          # see: https://github.com/pykeio/ort/issues/245#issuecomment-2253729331
          # So instead of that I've chosen to just not support x86 (32-bit)
          # - runner: ubuntu-22.04
          #   target: x86
          #   before: yum install -y openssl-devel
          - runner: ubuntu-22.04
            target: aarch64
            before: |
              sudo apt-get update -y && \
              sudo apt-get install pkg-config libssl-dev -y
              # echo "modversion openssl:" && \
              # pkg-config --modversion openssl && \
              # echo "cflags openssl:" && \
              # pkg-config --cflags openssl && \
              # echo "libs openssl:" && \
              # pkg-config --libs openssl
              # echo ">>> Debug: libssl-dev file list:" && \
              # dpkg -L libssl-dev && \
              # echo ">>> Debug: openssl.pc path:" && \
              # pkg-config --variable=pcfiledir openssl && \
              # echo ">>> Debug: /usr/lib/*ssl*:" && \
              # ls -l /usr/lib/*ssl* || true && \
              # echo ">>> Debug: /usr/include/openssl:" && \
              # ls -l /usr/include/openssl || true
            dockeropts: "--env OPENSSL_DIR='/usr'"
          - runner: ubuntu-22.04
            target: armv7
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
          - runner: ubuntu-22.04
            target: s390x
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
          - runner: ubuntu-22.04
            target: ppc64le
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      # via https://github.com/PyO3/maturin-action/discussions/162#discussioncomment-7978369
      - name: Calculate openssl-vendored
        shell: bash
        id: is-openssl-vendored
        run: |
          if [[ "${{ startsWith(matrix.platform.target, 'x86') }}" == "true" ]]; then
            echo "enabled=" >> $GITHUB_OUTPUT
          else
            echo "enabled=--features openssl-vendored" >> $GITHUB_OUTPUT
          fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: rewrite
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter ${{ steps.is-openssl-vendored.outputs.enabled }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: ${{ (matrix.platform.target == 'aarch64' || matrix.platform.target == 's390x') && '2_28' || 'auto' }}
          before-script-linux: |
            ${{ matrix.platform.before }}
          docker-options: |
            ${{ matrix.platform.dockeropts }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          # Same ONNX issue as x86 on Linux (see ORT comment above)
          # - runner: windows-latest
          #   target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    needs: [check-commit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path rewrite/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
