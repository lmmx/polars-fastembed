# This file is autogenerated by maturin v1.8.2
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check-commit:
    runs-on: ubuntu-latest
    # This job only runs if the commit message meets the condition
    if: >
      (github.event_name == 'push' &&
        (
          startsWith(github.event.head_commit.message, 'chore(release)') ||
          contains(github.event.head_commit.message, 'cibuildwheel')
        )
      )
      || (github.event_name == 'workflow_dispatch')
      || (github.event_name == 'pull_request' && github.event.pull_request.user.login == 'lmmx')
    steps:
      - name: Confirm commit message matched
        run: echo "Commit message matched the condition."

  linux:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
            before: yum install -y openssl-devel
            dockeropts: ""
            skip: false
            features: ""
            manylinux: auto
          - runner: ubuntu-22.04
            target: x86
            before: |
              yum install -y openssl-devel && \
              yum groupinstall "Development Tools" -y && \
              yum install glibc-devel.i686 libstdc++-devel.i686 -y && \
              yum install centos-release-scl devtoolset-8-toolchain -y && \
              scl enable devtoolset-8 bash && \
              git clone https://github.com/microsoft/onnxruntime.git && \
              pushd onnxruntime && \
              git submodule update --init --recursive && \
              export PATH=/opt/python/cp38-cp38/bin:$PATH && \
              python -m pip install flatbuffers pysnooper && \
              sed -i '/def main():/i import pysnooper\n\n@pysnooper.snoop(depth=3)' tools/ci_build/build.py && \
              ./build.sh --config RelWithDebInfo \
                     --build_shared_lib \
                     --parallel \
                     --skip_submodule_sync \
                     --allow_running_as_root \
                     --skip_tests \
                     --cmake_extra_defines onnxruntime_BUILD_UNIT_TESTS=OFF && \
              popd
            dockeropts: "--env ORT_LIB_LOCATION=$PWD/onnxruntime/build/Linux/RelWithDebInfo --env ORT_LIB_PROFILE=RelWithDebInfo --env ORT_STRATEGY=system --env ORT_PREFER_DYNAMIC_LINK=1"
            skip: false
            features: ""
            manylinux: "2_28"
            # x86 would require dynamic ORT loading and building ONNX runtime from source is
            # required to achieve that, so for now we cannot support x86 (32-bit)
            # https://ort.pyke.io/setup/linking#runtime-loading-with-load-dynamic
            # see: https://github.com/pykeio/ort/issues/245#issuecomment-2253729331
          - runner: ubuntu-22.04
            target: aarch64
            before: |
              sudo apt-get update -y && \
              sudo apt-get install pkg-config libssl-dev -y
            dockeropts: "--env OPENSSL_DIR='/usr'"
            skip: false
            features: "--features openssl-vendored"
            manylinux: 2_28
          - runner: ubuntu-22.04
            target: armv7
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
            skip: true
            features: "--features openssl-vendored"
            manylinux: auto
          - runner: ubuntu-22.04
            target: s390x
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
            # via https://github.com/rust-lang/stacker/issues/79
            dockeropts: "--env CFLAGS_s390x_unknown_linux_gnu=-march=z10"
            skip: true
            features: "--features openssl-vendored"
            manylinux: auto
          - runner: ubuntu-22.04
            target: ppc64le
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
            skip: true
            features: "--features openssl-vendored"
            manylinux: auto
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml ${{ matrix.platform.features }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: ${{ matrix.platform.manylinux }}
          before-script-linux: |
            ${{ matrix.platform.before }}
          docker-options: |
            ${{ matrix.platform.dockeropts }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: windows-latest
            target: x64
            skip: false
            features: ""
          # Same ONNX issue as x86 on Linux (see ORT comment above)
          - runner: windows-latest
            target: x86
            skip: true
            features: ""
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml ${{ matrix.platform.features }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
            skip: false
            features: ""
          - runner: macos-14
            target: aarch64
            skip: false
            features: ""
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml ${{ matrix.platform.features }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    needs: [check-commit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path rewrite/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
