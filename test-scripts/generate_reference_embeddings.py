#!/usr/bin/env -S uv run
# /// script
# requires-python = ">=3.10"
# dependencies = [
#     "fastembed>=0.4.0",
#     "numpy>=1.24.0",
# ]
# ///
"""
Generate reference embeddings using vanilla FastEmbed for polars-fastembed testing.

This is a standalone script that uses uv to manage its own dependencies,
avoiding any conflicts with the main project dependencies.

Usage:
    chmod +x generate_reference_embeddings.py
    ./generate_reference_embeddings.py

Or:
    uv run generate_reference_embeddings.py
"""

import json
from pathlib import Path

import numpy as np
from fastembed import TextEmbedding

# Test documents from FastEmbed docs
DOCUMENTS = [
    "Chandrayaan-3 is India's third lunar mission",
    "It aimed to land a rover on the Moon's surface - joining the US, China and Russia",
    "The mission is a follow-up to Chandrayaan-2, which had partial success",
    "Chandrayaan-3 will be launched by the Indian Space Research Organisation (ISRO)",
    "The estimated cost of the mission is around $35 million",
    "It will carry instruments to study the lunar surface and atmosphere",
    "Chandrayaan-3 landed on the Moon's surface on 23rd August 2023",
    "It consists of a lander named Vikram and a rover named Pragyan similar to Chandrayaan-2. Its propulsion module would act like an orbiter.",
    "The propulsion module carries the lander and rover configuration until the spacecraft is in a 100-kilometre (62 mi) lunar orbit",
    "The mission used GSLV Mk III rocket for its launch",
    "Chandrayaan-3 was launched from the Satish Dhawan Space Centre in Sriharikota",
    "Chandrayaan-3 was launched earlier in the year 2023",
]

MODEL_NAME = "BAAI/bge-small-en-v1.5"


def main():
    """Generate reference embeddings and save to fixtures directory."""

    print("🚀 Generating reference embeddings for polars-fastembed tests...")
    print(f"📄 Processing {len(DOCUMENTS)} test documents")
    print(f"🤖 Using model: {MODEL_NAME}")

    # Create fixtures directory
    fixtures_dir = Path("rewrite/tests/fixtures")
    fixtures_dir.mkdir(parents=True, exist_ok=True)

    print("📥 Loading FastEmbed model...")
    model = TextEmbedding(model_name=MODEL_NAME)

    print("🔄 Generating embeddings...")
    embeddings = list(model.embed(DOCUMENTS))

    # Convert to lists for JSON serialization
    embeddings_list = [emb.tolist() for emb in embeddings]

    # Prepare test data
    test_data = {
        "metadata": {
            "model": MODEL_NAME,
            "dimensions": len(embeddings_list[0]),
            "num_documents": len(DOCUMENTS),
            "description": "Reference embeddings generated by vanilla FastEmbed for polars-fastembed verification",
        },
        "documents": DOCUMENTS,
        "embeddings": embeddings_list,
    }

    # Save to fixtures
    output_path = fixtures_dir / "reference_embeddings.json"
    with open(output_path, "w") as f:
        json.dump(test_data, f, indent=2)

    print(f"✅ Saved reference embeddings to: {output_path}")
    print(f"📊 Embedding dimensions: {len(embeddings_list[0])}")
    print(f"📁 File size: {output_path.stat().st_size / 1024:.1f} KB")

    # Quick verification
    print("\n🔍 Quick verification:")
    print(f"  - Shape: {np.array(embeddings_list).shape}")
    print(
        f"  - First embedding preview: [{embeddings_list[0][0]:.6f}, {embeddings_list[0][1]:.6f}, ...]"
    )

    print("\n🎉 Reference embeddings generated successfully!")
    print(
        "   You can now run your polars-fastembed tests without needing fastembed as a dependency."
    )


if __name__ == "__main__":
    main()
