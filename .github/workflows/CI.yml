# This file is autogenerated by maturin v1.8.2
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check-commit:
    runs-on: ubuntu-latest
    # This job only runs if the commit message meets the condition
    if: >
      (
        (
          (github.event_name == 'push')
          || (github.event_name == 'pull_request' && github.event.pull_request.user.login == 'lmmx')
        )
        &&
        (
          startsWith(github.event.head_commit.message, 'chore(release)') ||
          contains(github.event.head_commit.message, 'cibuildwheel')
        )
      )
      || (github.event_name == 'workflow_dispatch')
      || (github.event_name == 'pull_request' && github.event.pull_request.user.login == 'lmmx')
    steps:
      - name: Confirm commit message matched
        run: echo "Commit message matched the condition."

  linux:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
            before: yum install -y openssl-devel
            dockeropts: ""
            skip: true
            features: ""
            manylinux: auto
          - runner: ubuntu-22.04
            target: x86
            before: |
              yum install \
                openssl-devel.i686 \
                pkg-config \
                glibc-devel.i686 \
                libstdc++-devel.i686 \
                gcc-toolset-14-libstdc++-devel.i686 \
                -y && \
              which gcc && \
              ln -s $(which gcc) /usr/bin/i686-linux-gnu-gcc && \
              ls -l /usr/bin/i686-linux-gnu-gcc && \
              /usr/bin/i686-linux-gnu-gcc --version && \
              i686-linux-gnu-gcc --version && \
              git clone https://github.com/microsoft/onnxruntime.git && \
              pushd onnxruntime && \
              git submodule update --init --recursive && \
              export PATH=/opt/python/cp38-cp38/bin:$PATH && \
              python -m pip install flatbuffers pysnooper && \
              sed -i '/def main():/i import pysnooper\n\n@pysnooper.snoop(depth=3)' tools/ci_build/build.py && \
              ./build.sh \
                     --config Release \
                     --build_shared_lib \
                     --parallel \
                     --skip_submodule_sync \
                     --allow_running_as_root \
                     --skip_tests \
                     --compile_no_warning_as_error \
                     --cmake_extra_defines onnxruntime_BUILD_UNIT_TESTS=OFF \
                     --cmake_extra_defines CMAKE_TOOLCHAIN_FILE=$PWD/../scripts/i686-toolchain.cmake \
                     --cmake_extra_defines CMAKE_VERBOSE_MAKEFILE=ON \
                     --cmake_extra_defines onnxruntime_USE_AVX2=OFF && \
              file $(readlink -f build/Linux/Release/libonnxruntime.so) && \
              popd && \
              mkdir -p rewrite/.cargo && \
              cat > rewrite/.cargo/config.toml << EOF
              [target.i686-unknown-linux-gnu]
              rustflags = [
                "-C", "link-search=/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release",
                "-C", "link-arg=-v",
              ]
              EOF
              cat rewrite/.cargo/config.toml
            dockeropts: >
              --env CC_i686_unknown_linux_gnu=/usr/bin/i686-linux-gnu-gcc
              --env CFLAGS_i686_unknown_linux_gnu=-m32
              --env LIBRARY_PATH=/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release:/usr/lib:$LIBRARY_PATH
              --env LD_LIBRARY_PATH=/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release:/usr/lib:$LD_LIBRARY_PATH
              --env PKG_CONFIG_ALLOW_CROSS=1
              --env PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig
              --env OPENSSL_DIR=/usr
              --env ORT_LIB_LOCATION=/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release
              --env ORT_LIB_PROFILE=Release
              --env ORT_STRATEGY=system
              --env ORT_PREFER_DYNAMIC_LINK=1
            skip: true
            features: ""
            manylinux: "2_28"
            # x86 would require dynamic ORT loading and building ONNX runtime from source is
            # required to achieve that, so for now we cannot support x86 (32-bit)
            # https://ort.pyke.io/setup/linking#runtime-loading-with-load-dynamic
            # see: https://github.com/pykeio/ort/issues/245#issuecomment-2253729331
          - runner: ubuntu-22.04
            target: aarch64
            before: |
              sudo apt-get update -y && \
              sudo apt-get install pkg-config libssl-dev -y
            dockeropts: --env OPENSSL_DIR=/usr
            skip: true
            features: "--features openssl-vendored"
            manylinux: 2_28
          - runner: ubuntu-22.04
            target: armv7
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
            skip: true
            features: "--features openssl-vendored"
            manylinux: auto
          - runner: ubuntu-22.04
            target: s390x
            before: sudo apt-get update -y && sudo apt-get install -y libssl-dev
            # via https://github.com/rust-lang/stacker/issues/79
            dockeropts: --env CFLAGS_s390x_unknown_linux_gnu=-march=z10
            skip: true
            features: "--features openssl-vendored"
            manylinux: auto
          - runner: ubuntu-22.04
            target: ppc64le
            before: |
              sudo apt-get update -y &&
              sudo apt-get install -y gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu libssl-dev &&
              sudo ln -s "$(command -v powerpc64le-linux-gnu-gcc)" /usr/bin/powerpc64le-unknown-linux-gnu-gcc &&
              git clone https://github.com/microsoft/onnxruntime.git &&
              pushd onnxruntime &&
              git submodule update --init --recursive &&
              python3 -m pip install flatbuffers pysnooper &&
              python3 -m pip install --upgrade cmake &&
              sed -i '/def main():/i import pysnooper\n\n@pysnooper.snoop(depth=3)' tools/ci_build/build.py &&
              ./build.sh \
                --config Release \
                --build_shared_lib \
                --parallel \
                --skip_submodule_sync \
                --allow_running_as_root \
                --skip_tests \
                --compile_no_warning_as_error \
                --cmake_extra_defines CMAKE_VERBOSE_MAKEFILE=ON \
                --cmake_extra_defines onnxruntime_BUILD_UNIT_TESTS=OFF \
                --cmake_extra_defines CMAKE_TOOLCHAIN_FILE=$PWD/../scripts/ppc64le-linux-gnu-toolchain.cmake \
                --cmake_extra_defines CMAKE_C_COMPILER=powerpc64le-linux-gnu-gcc \
                --cmake_extra_defines CMAKE_CXX_COMPILER=powerpc64le-linux-gnu-g++ &&
              file $(readlink -f build/Linux/Release/libonnxruntime.so) &&
              echo "Checking ONNX Runtime library:" &&
                ls -la build/Linux/Release/ &&
              echo "Testing linker:" &&
                echo 'int main() { return 0; }' > /tmp/test.c &&
                powerpc64le-linux-gnu-gcc /tmp/test.c -lonnxruntime -L/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release -o /tmp/linktest &&
                echo "Linkage successful!" &&
              powerpc64le-linux-gnu-readelf -d build/Linux/Release/libonnxruntime.so.1.22.0 &&
              popd &&
              mkdir -p rewrite/.cargo &&
              cat > rewrite/.cargo/config.toml << EOF
              [target.powerpc64le-unknown-linux-gnu]
              rustflags = [
                "-C", "link-arg=-Wl,--verbose",
                "-C", "link-search=/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release",
                "-C", "link-arg=-Wl,-rpath,/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release",
                "-C", "link-search=native=/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release",
              ]
              EOF
              cat rewrite/.cargo/config.toml
              cat << 'EOF' > rewrite/build.rs
              fn main() {
                  // Tell Cargo to pass these linker flags
                  println!("cargo:rustc-link-search=native=/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release");
              }
              EOF
            dockeropts: >
              --env CC_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-gcc
              --env CXX_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-g++
              --env AR_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-ar
              --env LIBRARY_PATH=/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release:/usr/lib:$LIBRARY_PATH
              --env LD_LIBRARY_PATH=/home/runner/work/polars-fastembed/polars-fastembed/onnxruntime/build/Linux/Release:/usr/lib:$LD_LIBRARY_PATH
              --env PKG_CONFIG_ALLOW_CROSS=1
              --env OPENSSL_DIR=/usr
              --env ORT_LIB_LOCATION=$PWD/onnxruntime/build/Linux/Release
              --env ORT_SHARED_LIB=libonnxruntime.so.1.22.0
              --env ORT_LIB_PROFILE=Release
              --env ORT_STRATEGY=system
              --env ORT_PREFER_DYNAMIC_LINK=1
            skip: false
            features: "--features openssl-vendored"
            manylinux: auto
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml ${{ matrix.platform.features }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: ${{ matrix.platform.manylinux }}
          before-script-linux: |
            ${{ matrix.platform.before }}
          docker-options: ${{ matrix.platform.dockeropts }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: windows-latest
            target: x64
            skip: true
            features: ""
          # Same ONNX issue as x86 on Linux (see ORT comment above)
          - runner: windows-latest
            target: x86
            skip: true
            features: ""
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml ${{ matrix.platform.features }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    needs: [check-commit]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
            skip: true
            features: ""
          - runner: macos-14
            target: aarch64
            skip: true
            features: ""
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: matrix.platform.skip != true
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path rewrite/Cargo.toml ${{ matrix.platform.features }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: matrix.platform.skip != true
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    needs: [check-commit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path rewrite/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
